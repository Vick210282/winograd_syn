// WC_5_5.v generated by WCSyn.py
`timescale 1ns / 1ps
module wc(D, clk, rst, Z);
input  [10*9-1:0] D;
input  clk, rst;
output reg [10*5-1:0] Z;

	reg [9:0] input_t [0:8];
	reg [9:0] d [0:80];
	reg [9:0] MUL [0:8];
	reg [9:0] output_t [0:4];

	always@(posedge clk)begin

		//input_transform
		d[80] <= (D[9:0]);
		d[79] <= (~D[19:10] + 1) <<< 2;
		d[78] <= ((~D[29:20] + 1) * 21) >>> 2;
		d[77] <= (D[39:30]) * 21;
		d[76] <= ((D[49:40]) * 21) >>> 2;
		d[75] <= (~D[59:50] + 1) * 21;
		d[74] <= (~D[69:60] + 1);
		d[73] <= (D[79:70]) <<< 2;
		d[72] <= 0;
		d[71] <= 0;
		d[70] <= (D[19:10]);
		d[69] <= 0;
		d[68] <= ((~D[39:30] + 1) * 21) >>> 2;
		d[67] <= 0;
		d[66] <= ((D[59:50]) * 21) >>> 2;
		d[65] <= 0;
		d[64] <= (~D[79:70] + 1);
		d[63] <= 0;
		d[62] <= 0;
		d[61] <= (D[19:10]);
		d[60] <= ((~D[29:20] + 1) * 9) >>> 1;
		d[59] <= (~D[39:30] + 1) * 3;
		d[58] <= ((D[49:40]) * 45) >>> 1;
		d[57] <= (~D[59:50] + 1) * 6;
		d[56] <= (~D[69:60] + 1) * 18;
		d[55] <= (D[79:70]) <<< 3;
		d[54] <= 0;
		d[53] <= 0;
		d[52] <= (D[19:10]);
		d[51] <= ((~D[29:20] + 1) * 7) >>> 1;
		d[50] <= (~D[39:30] + 1) * 7;
		d[49] <= ((D[49:40]) * 35) >>> 1;
		d[48] <= (D[59:50]) * 14;
		d[47] <= (~D[69:60] + 1) * 14;
		d[46] <= (~D[79:70] + 1) <<< 3;
		d[45] <= 0;
		d[44] <= 0;
		d[43] <= (D[19:10]);
		d[42] <= (~D[29:20] + 1) * 6;
		d[41] <= ((D[39:30]) * 27) >>> 2;
		d[40] <= ((D[49:40]) * 15) >>> 1;
		d[39] <= ((~D[59:50] + 1) * 39) >>> 2;
		d[38] <= ((~D[69:60] + 1) * 3) >>> 1;
		d[37] <= (D[79:70]) <<< 1;
		d[36] <= 0;
		d[35] <= 0;
		d[34] <= (D[19:10]);
		d[33] <= (~D[29:20] + 1) <<< 1;
		d[32] <= ((~D[39:30] + 1) * 37) >>> 2;
		d[31] <= ((D[49:40]) * 5) >>> 1;
		d[30] <= ((D[59:50]) * 41) >>> 2;
		d[29] <= (~D[69:60] + 1) >>> 1;
		d[28] <= (~D[79:70] + 1) <<< 1;
		d[27] <= 0;
		d[26] <= 0;
		d[25] <= (D[19:10]);
		d[24] <= (~D[29:20] + 1) * 5;
		d[23] <= (~D[39:30] + 1) >>> 2;
		d[22] <= ((D[49:40]) * 85) >>> 2;
		d[21] <= (~D[59:50] + 1) <<< 4;
		d[20] <= (~D[69:60] + 1) * 5;
		d[19] <= (D[79:70]) <<< 2;
		d[18] <= 0;
		d[17] <= 0;
		d[16] <= (D[19:10]);
		d[15] <= (~D[29:20] + 1) * 3;
		d[14] <= ((~D[39:30] + 1) * 33) >>> 2;
		d[13] <= ((D[49:40]) * 51) >>> 2;
		d[12] <= (D[59:50]) * 18;
		d[11] <= (~D[69:60] + 1) * 3;
		d[10] <= (~D[79:70] + 1) <<< 2;
		d[9] <= 0;
		d[8] <= 0;
		d[7] <= (D[19:10]);
		d[6] <= (~D[29:20] + 1) <<< 2;
		d[5] <= ((~D[39:30] + 1) * 21) >>> 2;
		d[4] <= (D[49:40]) * 21;
		d[3] <= ((D[59:50]) * 21) >>> 2;
		d[2] <= (~D[69:60] + 1) * 21;
		d[1] <= (~D[79:70] + 1);
		d[0] <= (D[89:80]) <<< 2;

		input_t[0] <= (d[0]) +  (d[1]) +  (d[2]) +  (d[3]) +  (d[4]) +  (d[5]) +  (d[6]) +  (d[7]) + 0;
		input_t[1] <=0 +  (d[10]) +  (d[11]) +  (d[12]) +  (d[13]) +  (d[14]) +  (d[15]) +  (d[16]) + 0;
		input_t[2] <=0 +  (d[19]) +  (d[20]) +  (d[21]) +  (d[22]) +  (d[23]) +  (d[24]) +  (d[25]) + 0;
		input_t[3] <=0 +  (d[28]) +  (d[29]) +  (d[30]) +  (d[31]) +  (d[32]) +  (d[33]) +  (d[34]) + 0;
		input_t[4] <=0 +  (d[37]) +  (d[38]) +  (d[39]) +  (d[40]) +  (d[41]) +  (d[42]) +  (d[43]) + 0;
		input_t[5] <=0 +  (d[46]) +  (d[47]) +  (d[48]) +  (d[49]) +  (d[50]) +  (d[51]) +  (d[52]) + 0;
		input_t[6] <=0 +  (d[55]) +  (d[56]) +  (d[57]) +  (d[58]) +  (d[59]) +  (d[60]) +  (d[61]) + 0;
		input_t[7] <=0 +  (d[64]) + 0 +  (d[66]) + 0 +  (d[68]) + 0 +  (d[70]) + 0;
		input_t[8] <=0 +  (d[73]) +  (d[74]) +  (d[75]) +  (d[76]) +  (d[77]) +  (d[78]) +  (d[79]) +  (d[80]);

		//G*g
		MUL[0] <= (input_t[0]);
		MUL[1] <= (input_t[1]) <<< 1;
		MUL[2] <= 0;
		MUL[3] <= (~input_t[3] + 1);
		MUL[4] <= 0;
		MUL[5] <= (~input_t[5] + 1) <<< 1;
		MUL[6] <= (~input_t[6] + 1);
		MUL[7] <= 0;
		MUL[8] <= (input_t[8])*3;

		output_t[0] <= (MUL[0]) + (MUL[1]) + (MUL[2]) + (MUL[3]) + (MUL[4]) + (MUL[5]) + (MUL[6]) + (MUL[7]) + 0;
		output_t[1] <=  0 + (MUL[1]) - (MUL[2]) + (MUL[3] <<< 1) - (MUL[4] <<< 1) + (MUL[5] >>> 1) - (MUL[6] >>> 1) + (MUL[7] <<< 2) + 0;
		output_t[2] <=  0 + (MUL[1]) + (MUL[2]) + (MUL[3] <<< 2) + (MUL[4] <<< 2) + (MUL[5] >>> 2) + (MUL[6] >>> 2) + (MUL[7] <<< 4) + 0;
		output_t[3] <=  0 + (MUL[1]) - (MUL[2]) + (MUL[3] <<< 3) - (MUL[4] <<< 3) + (MUL[5] >>> 3) - (MUL[6] >>> 3) + (MUL[7] <<< 6) + 0;
		output_t[4] <=  0 + (MUL[1]) + (MUL[2]) + (MUL[3] <<< 4) + (MUL[4] <<< 4) + (MUL[5] >>> 4) + (MUL[6] >>> 4) + (MUL[7] <<< 8) +  (MUL[8]);

		Z[49:40] <= output_t[0];
		Z[39:30] <= output_t[1];
		Z[29:20] <= output_t[2];
		Z[19:10] <= output_t[3];
		Z[9:0] <= output_t[4];

	end
endmodule
